cat << CTAG
{
    name:内存管理,
		elements:[
			`if [ -f "/sys/devices/virtual/block/zram0/disksize" ]; then
			ZRAM=\`$BB cat /sys/devices/virtual/block/zram0/disksize\`;
			ZRAM=$((ZRAM / 1024 / 1024));
			$BB echo '{ SPane:{
				title:"Z-RAM",
				description:"通过在 RAM 内的压缩块设备上分页，直到必须使用硬盘上虚拟内存的交换空间，以尽量避免在磁盘上进行分页，从而提高性能。Z-RAM可以在固有的内存上提供更多交换空间的功能。在内存紧张的时候可以节省内存空间，但压缩和解压内存分页上的数据会带来性能的消耗。假如你的内存不紧张的话，建议关闭。"
			}},
				{ SSeekBar:{
					unit:" MB",
					step:1,
					min:0,
					max:1024, 
					default:'$ZRAM',
					action:"zram /sys/devices/virtual/block/zram0/disksize"
				}},'
			fi`
			`if [ -f "/sys/block/zram0/comp_algorithm" ]; then
			CA=\`$BB echo $(/res/synapse/actions/bracket-option /sys/block/zram0/comp_algorithm)\`;
				$BB echo '{ SOptionList:{
					title:"压缩算法",
					description:"选用不同的压缩方式将重置Z-RAM。 LZ4算法倾向于更快的解压缩性能。更多信息请点击 : <a href='https://code.google.com/p/lz4/'>HERE</a>.",
					default:'$CA',
					action:"bracket-option /sys/block/zram0/comp_algorithm",
					values:['
						for COMPALG in \`$BB cat /sys/block/zram0/comp_algorithm | $BB sed -e "s/\]//;s/\[//"\`; do
							echo "\"$COMPALG\",";
						done;
					$BB echo '],
					notify:[
						{
							on:APPLY,
							do:[ RESET, REFRESH, APPLY ],
							to:"zram /sys/devices/virtual/block/zram0/disksize"
						}
					]
				}},'
			fi`
			`if [ -f "/sys/block/zram0/max_comp_streams" ]; then
			MCS=\`$BB cat /sys/block/zram0/max_comp_streams\`;
				$BB echo '{ SSeekBar:{
					title:"压缩流",
					description:"选用不同的压缩流将重置Z-RAM。压缩流越大可并行同时压缩的操作越多，同时越损耗性能。",
					min:1,
					max:5,
					step:1,
					default:'$MCS',
					action:"generic /sys/block/zram0/max_comp_streams",
					notify:[
						{
							on:APPLY,
							do:[ RESET, REFRESH, APPLY ],
							to:"zram /sys/devices/virtual/block/zram0/disksize"
						}
					]
				}},'
			fi`
			{ SPane:{
				title:"虚拟内存",
				description:"虚拟内存是指使用磁盘当作RAM的扩展，这样可用的内存的大小就相应地增大了。内核会将暂时不用的内存块的内容写到硬盘上，当需要用到原始的内容时，它们被重新读入内存。虚拟内存同时也支持跟 Z-RAM 的交换操作。"
			}},
				{ SSeekBar:{
					title:"Dirty 数据后台占用比率",
					description:"当空闲内存低于百分比时，内核必须将 Dirty 数据页面写回磁盘，以便释放内存。",
					unit:"%",
					step:1,
					min:0,
					max:100,
					default:`$BB cat /proc/sys/vm/dirty_background_ratio`,
					action:"generic /proc/sys/vm/dirty_background_ratio"
				}},
				{ SSeekBar:{
					title:"Dirty 数据比率",
					description:"当达到设置占用内存的百分比，写入操作会堵塞，直至所有 Dirty 数据写入至文件。值越低未写入缓存越小，当大量的写入操作时可减小卡顿。",
					unit:"%",
					step:1,
					min:0,
					max:100,
					default:`$BB cat /proc/sys/vm/dirty_ratio`,
					action:"generic /proc/sys/vm/dirty_ratio"
				}},
				{ SOptionList:{
					title:"丢弃缓存 (启动后清除 VFS 缓存)",
					description:"此操作会在系统引导过程中强制重建应用占用的系统缓存。注意：此操作可能需要 1-2 分钟，开启会带来更好的系统读写性能。",
					default:0,
					action:"dropcaches /res/synapse/files/dropcaches_prof",
					values:{ 0:"Disabled", 1:"Enabled"
					}
				}},
				`if [ -f "/proc/sys/vm/extra_free_kbytes" ]; then
					$BB echo '{ SSeekBar:{
						title:"额外释放的空间",
						unit:" kB",
						step:10,
						min:0,
						max:50000,
						default:'\`$BB cat /proc/sys/vm/extra_free_kbytes\`',
						action:"generic /proc/sys/vm/extra_free_kbytes"
					}},'
				fi`
				{ SOptionList:{
					title:"笔记本模式（自动文件系统回写延迟模式）",
					description:"此操作在屏幕开启时将内存中的缓存延迟写入到磁盘中（启用会带来更好的性能，但当电源或其他原因造成系统崩溃的时候可能造成数据丢失）。",
					default:`$BB cat /proc/sys/vm/laptop_mode`,
					action:"generic /proc/sys/vm/laptop_mode",
					values:{ 0:"Disabled", 1:"Enabled"
					}
				}},
				{ SSeekBar:{
					title:"磁盘虚拟内存",
					description:"控制物理内存和内置储存器之间的交换趋势。由于内置储存器比内存慢很多，如果交换过于积极，可能会导致系统或应用程序较慢的响应时间。",
					unit:"%",
					step:1,
					min:0,
					max:100,
					default:`$BB cat /proc/sys/vm/swappiness`,
					action:"generic /proc/sys/vm/swappiness"
				}},
				{ SSeekBar:{
					title:"VFS 缓存压力",
					description:"控制回收内存中目录和文件索引等可回收空间的趋势。低 = 倾向保留目录和文件索引信息，高 = 倾向收回的目录和文件索引信息。",
					unit:"%",
					step:1,
					min:0,
					max:150,
					default:`$BB cat /proc/sys/vm/vfs_cache_pressure`,
					action:"generic /proc/sys/vm/vfs_cache_pressure"
				}},
			`if [ -f "/sys/module/lowmemorykiller/parameters/minfree" ]; then
				$BB echo '{ SPane:{
					title:"LMK低内存清理",
					description:"LMK Minfree 控制每个app可以占用多少内存，并负责多任务内存管理。"
				}},
				{ SCheckBox:{
					label:"自适应低内存管理",
					description:"自适应LMK功能可以优先防止延迟，加强LMK执行时的效率.",
					default:1,
					action:"generic /sys/module/lowmemorykiller/parameters/enable_adaptive_lmk"
				}},'
					for LMK in 1 2 3 4 5 6; do
						$BB echo '{ SSeekBar:{ '
							case $LMK in
								1)
									$BB echo 'title:"前台程序", description:"当前在你所看到的界面上运行的程序。", default:6' ;;
								2)
									$BB echo 'title:"可见应用", description:"在状态栏或者屏幕叠加层上显示的应用。", default:8' ;;
								3)
									$BB echo 'title:"次要服务", description:"一些后台随时准备启动的应用服务。", default:16' ;;
								4)
									$BB echo 'title:"隐蔽程序", description:"等待被唤醒的后台应用。", default:64' ;;
								5)
									$BB echo 'title:"内容提供服务", description:"程序之间共享数据接口程序。", default:112' ;;
								6)
									$BB echo 'title:"空闲程序", description:"被用户关闭的程序，即后台缓存。", default:124' ;;
							esac
						$BB echo ', action:"lmk '${LMK}'",
						unit:" MB", min:1, max:300 }},'
					done
			fi`
    ]
}
CTAG
